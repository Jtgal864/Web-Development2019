Properties
Introducing the Box Models
The CSS Box Model

All HTML elements can be considered as boxes. The CSS box model represents the design and layout of the site. It consists of margins, borders, paddings, and the actual content.

The properties work in the same order: top, right, bottom, and left.


Undestanding the Box Model

More on Box Models

Every element of the webpage is a box.

CSS uses the box model to determine how big the boxes are and how to place them.


Total Width of an Element

When working with boxes, it is important to understand how the total width of an element is calculated.
For example, the total width of the box with paddings will be the sum of width plus padding left and padding right.

Here is another box with margins, border, and paddings.
The total width is the sum of left and right margins, left and right borders, left and right paddings, and the actual width of the content.


Total Height of an Element

The total height of an element is calculated the same way as the width.
The example below is the same box from the previous lesson with padding, border and margin.


The border Property

The CSS border property allows you to customize the borders of HTML elements.
In order to add a border to the element, you need to specify the size, style, and color of the border.
The example below shows how to add a solid green border to the paragraph.

The HTML:
<p>This is an example of a solid border.</p>

The CSS:
p {
   padding: 10px;    
   border: 5px solid green;


Border Width

The properties for the border can be set separately. The border-width property specifies the width of the border.

The HTML:
<p class="first">
    Border width of this paragraph is set to 2px.
</p>
<p class="second">
    Border width of this paragraph is set to 5px.
</p>

The CSS:
p.first {
   padding: 10px;    
   border-style: solid;
   border-width: 2px;
}
p.second {
   padding: 10px;    
   border-style: solid;
   border-width: 5px;
}


The border-style Property

The default value of border-style is none, which defines no border.
There are various styles supported for the border-style property: dotted, dashed, double, etc. The example below illustrates the differences between them.

The HTML:
<p class="none">This paragraph has no border.</p>
<p class="dotted">This is a dotted border.</p>
<p class="dashed">This is a dashed border.</p>
<p class="double">This is a double border.</p>
<p class="groove">This is a grooved border.</p>
<p class="ridge">This is a ridged border.</p>
<p class="inset">This is an inset border.</p>
<p class="outset">This is an outset border.</p>
<p class="hidden">This is a hidden border.</p>

The CSS:
p.none {border-style: none;}
p.dotted {border-style: dotted;}
p.dashed {border-style: dashed;}
p.double {border-style: double;}
p.groove {border-style: groove;}
p.ridge {border-style: ridge;}
p.inset {border-style: inset;}
p.outset {border-style: outset;}
p.hidden {border-style: hidden;}



CSS Width and Height

To style a <div> element to have a total width and height of 100px:

The HTML:
<div>The total width and height of this element is 100px.</div>

The CSS:
div {
   border: 5px solid green;    
   width: 90px;
   height: 90px;
}



Width and Height Measurement

The width and height of an element can be also assigned using percents.
In the example below the width of an element is assigned in percentages, the height is in pixels.

The HTML:
<div>The total width of this element is <strong>100%</strong> and the total height is <strong>100px</strong> .</div>

The CSS:
div {
   border: 5px solid green;    
   width: 100%;
   height: 90px;
}



The Minimum and Maximum Sizes

To set the minimum and maximum height and width of an element, you can use the following properties:

min-width - the minimum width of an element
min-height - the minimum height of an element
max-width - the maximum width of an element
max-height - the maximum height of an element

In the example below, we set the minimum height and maximum width of different paragraphs to 100px.

The HTML:
<p class="first">The <strong>minimum height </strong> of this paragraph is set to 100px.</p>
<p class="second">The<strong> maximum width </strong> of this paragraph is set to 100px.</p>

The CSS:
p.first {
   border: 5px solid green;    
   min-height: 100px;       
}
p.second {
   border: 5px solid green;    
   max-width: 100px;       
}




The background-color Property

The background-color property is used to specify the background color of an element.

The HTML:
<p>The background color of this page is set to LightSkyBlue.</p>

The CSS:
body {
    background-color: #87CEFA;
}


The Background Color Values

The color of the background can be defined using three different formats: a color name, hexadecimal values, and RGB.

In the example below, the body, h1, and p elements are assigned different background colors:

The HTML:
<h1>This is a heading</h1>
<p>This is a paragraph</p>

The CSS:
body {
   background-color: #C0C0C0;
}
h1 {
   background-color: rgb(135,206,235);
}
p {
   background-color: LightGreen;
}



The background-image Property

The background-image property sets one or several background images in an element. Let's set a background-image for the <body> element.

The CSS:
body {
   background-image: url("css_logo.png");
   background-color: #e9e9e9;
}


The background-image Property

Background-image can be set not only for the whole page, but for individual elements, as well.
Below we set a background image for the <p> element.

The HTML:
<p>This paragraph has a background image.</p>

The CSS:
p {
   padding: 30px;
   background-image: url("green_photo.jpg");
   color: white;   
}



The background-repeat Property

The background repeat property specifies how background images are repeated. A background image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.

The repeat-x will repeat a background image only horizontally.
The CSS:
body {
   background-image: url("css_logo.png");
   background-repeat: repeat-x;  
}



Setting the Value to Inherit

When you set the background-repeat property to inherit, it will take the same specified value as the property for the element's parent.

For example, we set the body background repeat only horizontally. If we set some paragraph background-repeat values to be inherited, they will take the same property value as the body element.

The CSS:
body {
   background-image: url("css_logo.png");
   background-repeat: repeat-x;
}
p {
   background-image: url("css_logo.png");
   background-repeat: inherit;
   margin-top: 100px;
   padding: 40px;
}


The background-attachment Property

The background-attachment property sets whether a background image is fixed or scrolls with the rest of the page.
Even if an element has a scrolling mechanism, a "fixed" background doesn't move with the element.

The CSS:
body {
   background-image: url("css_logo.png");
   background-repeat: no-repeat;
   background-attachment: fixed;
}


The background-attachment Values

You can also set the background-attachment to inherit or scroll.
When you set the background-attachment to inherit, it will inherit the value from its parent element.

When you set the background-attachment to scroll, the background image will scroll with the rest of the content.

The CSS:
body {
   background-image: url("css_logo.png");
   background-repeat: no-repeat;
   background-attachment: scroll;
}


The list-style-type Property

The CSS list properties allow us to set different list item markers. In HTML, there are two types of lists:
unordered lists (<ul>) - the list items are marked with bullets
ordered lists (<ol>) - the list items are marked with numbers or letters
With CSS, lists can be styled further, and images can be used as the list item marker.
One of the ways is to use the list-style-type property, which can be set to circle, square, decimal, disc, lower-alpha, etc.

The HTML:
<ol class="lower-alpha">
   <li>Red</li>
   <li>Green</li>
   <li>Blue</li>
</ol>
<ul class="circle">
   <li>Red</li>
   <li>Green</li>
   <li>Blue</li>
</ul>
<ul class="square">
   <li>Red</li>
   <li>Green</li>
   <li>Blue</li>
</ul>

The CSS:
ol.lower-alpha {
   list-style-type: lower-alpha;
}
ul.circle {
   list-style-type: circle;
}
ul.square {
   list-style-type: square;
}



The List Image and Position

There are also other list properties, such as:
list-style-image - specifies an image to be used as the list item marker.
list-style-position - specifies the position of the marker box (inside, outside).

In the example below, we use an image as the list item marker, and specify the position to be inside of the content flow.

The HTML:
<p>The following list has list-style-position: <strong>inside</strong>.</p>
<ul>
   <li>Red</li>
   <li>Green</li>
   <li>Blue</li>
</ul>

The CSS:
ul {
   list-style-image: url("logo.jpg");
   list-style-position: inside;
}


The list-style Property

The list-style property is a shorthand property for setting list-style-type, list-style-image and list-style-position. It is used to set all of the list properties in one declaration:
ul {
   list-style: square outside none;
}

This would be the same as the longhand version.
ul {
   list-style-type: square;
   list-style-position: outside;
   list-style-image: none;
}



